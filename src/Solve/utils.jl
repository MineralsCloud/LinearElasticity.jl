function combine_strains(œµ::EngineeringStrain, ::CubicConstraint)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = œµ
    return [  # 6√ó3 matrix
        œµ‚ÇÅ œµ‚ÇÇ+œµ‚ÇÉ 0
        œµ‚ÇÇ œµ‚ÇÅ+œµ‚ÇÉ 0
        œµ‚ÇÉ œµ‚ÇÅ+œµ‚ÇÇ 0
        0 0 œµ‚ÇÑ
        0 0 œµ‚ÇÖ
        0 0 œµ‚ÇÜ
    ]
end
function combine_strains(œµ::EngineeringStrain, ::TetragonalConstraint)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = œµ
    # Tetragonal (I) class (c‚ÇÅ‚ÇÜ = 0) is a special case of tetragonal (II) class
    return [  # 6√ó7 matrix
        œµ‚ÇÅ 0 œµ‚ÇÇ œµ‚ÇÉ œµ‚ÇÜ 0 0
        œµ‚ÇÇ 0 œµ‚ÇÅ œµ‚ÇÉ -œµ‚ÇÜ 0 0
        0 œµ‚ÇÉ 0 œµ‚ÇÅ+œµ‚ÇÇ 0 0 0
        0 0 0 0 0 œµ‚ÇÑ 0
        0 0 0 0 0 œµ‚ÇÖ 0
        0 0 0 0 œµ‚ÇÅ-œµ‚ÇÇ 0 œµ‚ÇÜ
    ]
end
function combine_strains(œµ::EngineeringStrain, ::OrthorhombicConstraint)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = œµ
    return [  # 6√ó9 matrix
        œµ‚ÇÅ 0 0 œµ‚ÇÇ œµ‚ÇÉ 0 0 0 0
        0 œµ‚ÇÇ 0 œµ‚ÇÅ 0 œµ‚ÇÉ 0 0 0
        0 0 œµ‚ÇÉ 0 œµ‚ÇÅ œµ‚ÇÇ 0 0 0
        0 0 0 0 0 0 œµ‚ÇÑ 0 0
        0 0 0 0 0 0 0 œµ‚ÇÖ 0
        0 0 0 0 0 0 0 0 œµ‚ÇÜ
    ]
end
function combine_strains(œµ::EngineeringStrain, ::HexagonalConstraint)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = œµ
    return [  # 6√ó5 matrix
        œµ‚ÇÅ 0 œµ‚ÇÇ œµ‚ÇÉ 0
        œµ‚ÇÇ 0 œµ‚ÇÅ œµ‚ÇÉ 0
        0 œµ‚ÇÉ 0 œµ‚ÇÅ+œµ‚ÇÇ 0
        0 0 0 0 œµ‚ÇÑ
        0 0 0 0 œµ‚ÇÖ
        œµ‚ÇÜ/2 0 -œµ‚ÇÜ/2 0 0
    ]
end
function combine_strains(œµ::EngineeringStrain, ::TrigonalConstraint)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = œµ
    # Rhombohedral (I) class (c‚ÇÅ‚ÇÖ = 0) is a special case of rhombohedral (II) class
    return [  # 6√ó7 matrix
        œµ‚ÇÅ 0 œµ‚ÇÇ œµ‚ÇÉ 0 œµ‚ÇÑ œµ‚ÇÖ
        œµ‚ÇÇ 0 œµ‚ÇÅ œµ‚ÇÉ 0 -œµ‚ÇÑ -œµ‚ÇÖ
        0 œµ‚ÇÉ 0 œµ‚ÇÅ+œµ‚ÇÇ 0 0 0
        0 0 0 0 œµ‚ÇÑ œµ‚ÇÅ-œµ‚ÇÇ -œµ‚ÇÜ
        0 0 0 0 œµ‚ÇÖ œµ‚ÇÜ œµ‚ÇÅ-œµ‚ÇÇ
        œµ‚ÇÜ/2 0 -œµ‚ÇÜ/2 0 0 œµ‚ÇÖ -œµ‚ÇÑ
    ]
end
function combine_strains(œµ::EngineeringStrain, ::MonoclinicConstraint)  # Only standard orientation (diad ‚à• x‚ÇÇ) is implemented
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = œµ
    return [  # 6√ó13 matrix
        œµ‚ÇÅ 0 0 œµ‚ÇÇ œµ‚ÇÉ 0 0 0 0 œµ‚ÇÖ 0 0 0
        0 œµ‚ÇÇ 0 œµ‚ÇÅ 0 œµ‚ÇÉ 0 0 0 0 œµ‚ÇÖ 0 0
        0 0 œµ‚ÇÉ 0 œµ‚ÇÅ œµ‚ÇÇ 0 0 0 0 0 œµ‚ÇÖ 0
        0 0 0 0 0 0 œµ‚ÇÑ 0 0 0 0 0 œµ‚ÇÜ
        0 0 0 0 0 0 0 œµ‚ÇÖ 0 œµ‚ÇÅ œµ‚ÇÇ œµ‚ÇÉ 0
        0 0 0 0 0 0 0 0 œµ‚ÇÜ 0 0 0 œµ‚ÇÑ
    ]
end
function combine_strains(œµ::EngineeringStrain, ::TriclinicConstraint)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = œµ
    return [  # 6√ó21 matrix
        œµ‚ÇÅ œµ‚ÇÇ œµ‚ÇÉ œµ‚ÇÑ œµ‚ÇÖ œµ‚ÇÜ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
        0 œµ‚ÇÅ 0 0 0 0 œµ‚ÇÇ œµ‚ÇÉ œµ‚ÇÑ œµ‚ÇÖ œµ‚ÇÜ 0 0 0 0 0 0 0 0 0 0
        0 0 œµ‚ÇÅ 0 0 0 0 œµ‚ÇÇ 0 0 0 œµ‚ÇÉ œµ‚ÇÑ œµ‚ÇÖ œµ‚ÇÜ 0 0 0 0 0 0
        0 0 0 œµ‚ÇÅ 0 0 0 0 œµ‚ÇÇ 0 0 0 œµ‚ÇÉ 0 0 œµ‚ÇÑ œµ‚ÇÖ œµ‚ÇÜ 0 0 0
        0 0 0 0 œµ‚ÇÅ 0 0 0 0 œµ‚ÇÇ 0 0 0 œµ‚ÇÉ 0 0 œµ‚ÇÑ 0 œµ‚ÇÖ œµ‚ÇÜ 0
        0 0 0 0 0 œµ‚ÇÅ 0 0 0 0 œµ‚ÇÇ 0 0 0 œµ‚ÇÉ 0 0 œµ‚ÇÑ 0 œµ‚ÇÖ œµ‚ÇÜ
    ]
end
combine_strains(ùõú::AbstractVector{<:EngineeringStrain}, constraint::SymmetryConstraint) =
    vcat((combine_strains(constraint, œµ) for œµ in ùõú)...)

function construct_c·µ¢‚±º(ùêú, ::CubicConstraint)
    ùüé, c‚ÇÅ‚ÇÅ, c‚ÇÅ‚ÇÇ, c‚ÇÑ‚ÇÑ = _promote_with_zero(ùêú)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÇ, ùüé, ùüé, ùüé, c‚ÇÅ‚ÇÅ, c‚ÇÅ‚ÇÇ, ùüé, ùüé, ùüé, c‚ÇÅ‚ÇÅ, ùüé, ùüé, ùüé, c‚ÇÑ‚ÇÑ, ùüé, ùüé, c‚ÇÑ‚ÇÑ, ùüé, c‚ÇÑ‚ÇÑ
    )
end
function construct_c·µ¢‚±º(ùêú, ::TetragonalConstraint)
    ùüé, c‚ÇÅ‚ÇÅ, c‚ÇÉ‚ÇÉ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, c‚ÇÅ‚ÇÜ, c‚ÇÑ‚ÇÑ, c‚ÇÜ‚ÇÜ = _promote_with_zero(ùêú)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, ùüé, ùüé, c‚ÇÅ‚ÇÜ, c‚ÇÅ‚ÇÅ, c‚ÇÅ‚ÇÉ, ùüé, ùüé, -c‚ÇÅ‚ÇÜ, c‚ÇÉ‚ÇÉ, ùüé, ùüé, ùüé, c‚ÇÑ‚ÇÑ, ùüé, ùüé, c‚ÇÑ‚ÇÑ, ùüé, c‚ÇÜ‚ÇÜ
    )
end
function construct_c·µ¢‚±º(ùêú, ::OrthorhombicConstraint)
    ùüé, c‚ÇÅ‚ÇÅ, c‚ÇÇ‚ÇÇ, c‚ÇÉ‚ÇÉ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, c‚ÇÇ‚ÇÉ, c‚ÇÑ‚ÇÑ, c‚ÇÖ‚ÇÖ, c‚ÇÜ‚ÇÜ = _promote_with_zero(ùêú)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, ùüé, ùüé, ùüé, c‚ÇÇ‚ÇÇ, c‚ÇÇ‚ÇÉ, ùüé, ùüé, ùüé, c‚ÇÉ‚ÇÉ, ùüé, ùüé, ùüé, c‚ÇÑ‚ÇÑ, ùüé, ùüé, c‚ÇÖ‚ÇÖ, ùüé, c‚ÇÜ‚ÇÜ
    )
end
function construct_c·µ¢‚±º(ùêú, ::HexagonalConstraint)
    ùüé, c‚ÇÅ‚ÇÅ, c‚ÇÉ‚ÇÉ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, c‚ÇÑ‚ÇÑ = _promote_with_zero(ùêú)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        c‚ÇÅ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÉ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        (c‚ÇÅ‚ÇÅ - c‚ÇÅ‚ÇÇ) / 2,
    )
end
function construct_c·µ¢‚±º(ùêú, ::TrigonalConstraint)
    ùüé, c‚ÇÅ‚ÇÅ, c‚ÇÉ‚ÇÉ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, c‚ÇÑ‚ÇÑ, c‚ÇÅ‚ÇÑ, c‚ÇÅ‚ÇÖ = _promote_with_zero(ùêú)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        c‚ÇÅ‚ÇÉ,
        c‚ÇÅ‚ÇÑ,
        c‚ÇÅ‚ÇÖ,
        ùüé,
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÉ,
        -c‚ÇÅ‚ÇÑ,
        -c‚ÇÅ‚ÇÖ,
        ùüé,
        c‚ÇÉ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        -c‚ÇÅ‚ÇÖ,
        c‚ÇÑ‚ÇÑ,
        c‚ÇÅ‚ÇÑ,
        (c‚ÇÅ‚ÇÅ - c‚ÇÅ‚ÇÇ) / 2,
    )
end
function construct_c·µ¢‚±º(ùêú, ::MonoclinicConstraint)
    ùüé, c‚ÇÅ‚ÇÅ, c‚ÇÇ‚ÇÇ, c‚ÇÉ‚ÇÉ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, c‚ÇÇ‚ÇÉ, c‚ÇÑ‚ÇÑ, c‚ÇÖ‚ÇÖ, c‚ÇÜ‚ÇÜ, c‚ÇÅ‚ÇÖ, c‚ÇÇ‚ÇÖ, c‚ÇÉ‚ÇÖ, c‚ÇÑ‚ÇÜ = _promote_with_zero(
        ùêú
    )
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        c‚ÇÅ‚ÇÉ,
        ùüé,
        c‚ÇÅ‚ÇÖ,
        ùüé,
        c‚ÇÇ‚ÇÇ,
        c‚ÇÇ‚ÇÉ,
        ùüé,
        c‚ÇÇ‚ÇÖ,
        ùüé,
        c‚ÇÉ‚ÇÉ,
        ùüé,
        c‚ÇÉ‚ÇÖ,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        c‚ÇÑ‚ÇÜ,
        c‚ÇÖ‚ÇÖ,
        ùüé,
        c‚ÇÜ‚ÇÜ,
    )
end
construct_c·µ¢‚±º(ùêú, ::TriclinicConstraint) = StiffnessMatrix(ùêú...)

function combine_stresses(::CubicConstraint, stress::EngineeringStress)
    œÉ‚ÇÅ, œÉ‚ÇÇ, œÉ‚ÇÉ, œÉ‚ÇÑ, œÉ‚ÇÖ, œÉ‚ÇÜ = stress
    return [  # 6√ó3 matrix
        œÉ‚ÇÅ œÉ‚ÇÇ+œÉ‚ÇÉ 0
        œÉ‚ÇÇ œÉ‚ÇÅ+œÉ‚ÇÉ 0
        œÉ‚ÇÉ œÉ‚ÇÅ+œÉ‚ÇÇ 0
        0 0 œÉ‚ÇÑ
        0 0 œÉ‚ÇÖ
        0 0 œÉ‚ÇÜ
    ]
end
combine_stresses(system::CrystalSystem, stresses::AbstractVector{<:EngineeringStress}) =
    vcat((combine_stresses(system, stress) for stress in stresses)...)

function construct_s·µ¢‚±º(::CubicConstraint, ùê¨)
    ùüé, s‚ÇÅ‚ÇÅ, s‚ÇÅ‚ÇÇ, s‚ÇÑ‚ÇÑ = _promote_with_zero(ùê¨)
    return StiffnessMatrix(
        s‚ÇÅ‚ÇÅ, s‚ÇÅ‚ÇÇ, s‚ÇÅ‚ÇÇ, ùüé, ùüé, ùüé, s‚ÇÅ‚ÇÅ, s‚ÇÅ‚ÇÇ, ùüé, ùüé, ùüé, s‚ÇÅ‚ÇÅ, ùüé, ùüé, ùüé, s‚ÇÑ‚ÇÑ, ùüé, ùüé, s‚ÇÑ‚ÇÑ, ùüé, s‚ÇÑ‚ÇÑ
    )
end

function _promote_with_zero(xs)
    T = Base.promote_typeof(xs...)
    ùüé = zero(T)
    return ùüé, (convert(T, x) for x in xs)...
end
