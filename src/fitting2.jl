using Crystallography:
    CrystalSystem,
    Cubic,
    Hexagonal,
    Trigonal,
    Tetragonal,
    Orthorhombic,
    Monoclinic,
    Triclinic
using LinearAlgebra: Symmetric, dot

export fit_elastic_constant

function form_matrix(::Cubic, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó3 matrix
        œµ‚ÇÅ œµ‚ÇÇ+œµ‚ÇÉ 0
        œµ‚ÇÇ œµ‚ÇÅ+œµ‚ÇÉ 0
        œµ‚ÇÉ œµ‚ÇÅ+œµ‚ÇÇ 0
        0 0 œµ‚ÇÑ
        0 0 œµ‚ÇÖ
        0 0 œµ‚ÇÜ
    ]
end
function form_matrix(::Tetragonal, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó6 matrix
        œµ‚ÇÅ 0 œµ‚ÇÇ œµ‚ÇÉ 0 0
        œµ‚ÇÇ 0 œµ‚ÇÅ œµ‚ÇÉ 0 0
        0 œµ‚ÇÉ 0 œµ‚ÇÅ+œµ‚ÇÇ 0 0
        0 0 0 0 0 œµ‚ÇÜ
        0 0 0 0 œµ‚ÇÖ 0
        0 0 0 0 œµ‚ÇÑ 0
    ]
end
function form_matrix(::Orthorhombic, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó9 matrix
        œµ‚ÇÅ 0 0 œµ‚ÇÇ œµ‚ÇÉ 0 0 0 0
        0 œµ‚ÇÇ 0 œµ‚ÇÅ 0 œµ‚ÇÉ 0 0 0
        0 0 œµ‚ÇÉ 0 œµ‚ÇÅ œµ‚ÇÇ 0 0 0
        0 0 0 0 0 0 œµ‚ÇÑ 0 0
        0 0 0 0 0 0 0 œµ‚ÇÖ 0
        0 0 0 0 0 0 0 0 œµ‚ÇÜ
    ]
end
function form_matrix(::Hexagonal, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó5 matrix
        œµ‚ÇÅ 0 œµ‚ÇÇ œµ‚ÇÉ 0
        œµ‚ÇÇ 0 œµ‚ÇÅ œµ‚ÇÉ 0
        0 œµ‚ÇÉ 0 œµ‚ÇÅ+œµ‚ÇÇ 0
        0 0 0 0 œµ‚ÇÑ
        0 0 0 0 œµ‚ÇÖ
        œµ‚ÇÜ 0 -œµ‚ÇÜ 0 0
    ]
end
function form_matrix(::Trigonal, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó6 matrix
        œµ‚ÇÅ 0 œµ‚ÇÇ œµ‚ÇÉ 0 œµ‚ÇÖ
        œµ‚ÇÇ 0 œµ‚ÇÅ œµ‚ÇÉ 0 -œµ‚ÇÖ
        0 œµ‚ÇÉ 0 œµ‚ÇÅ+œµ‚ÇÇ 0 0
        0 0 0 0 œµ‚ÇÑ -2œµ‚ÇÜ
        0 0 0 0 œµ‚ÇÖ 2(œµ‚ÇÅ-œµ‚ÇÇ)
        œµ‚ÇÜ 0 -œµ‚ÇÜ 0 0 -2œµ‚ÇÑ
    ]
end
function form_matrix(::Monoclinic, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    Œ≥ = œµ‚ÇÜ / 2
    return [  # 6√ó13 matrix
        œµ‚ÇÅ 0 0 œµ‚ÇÇ œµ‚ÇÉ 0 0 0 0 Œ≥ 0 0 0
        0 œµ‚ÇÇ 0 œµ‚ÇÅ 0 œµ‚ÇÉ 0 0 0 0 Œ≥ 0 0
        0 0 œµ‚ÇÉ 0 œµ‚ÇÅ œµ‚ÇÇ 0 0 0 0 0 Œ≥ 0
        0 0 0 0 0 0 œµ‚ÇÑ 0 0 0 0 0 œµ‚ÇÖ/2
        0 0 0 0 0 0 0 œµ‚ÇÖ 0 0 0 0 œµ‚ÇÑ/2
        0 0 0 0 0 0 0 0 œµ‚ÇÜ œµ‚ÇÅ œµ‚ÇÇ œµ‚ÇÉ 0
    ]
end
function form_matrix(::Triclinic, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    Œ±, Œ≤, Œ≥ = œµ‚ÇÑ / 2, œµ‚ÇÖ / 2, œµ‚ÇÜ / 2
    return [  # 6√ó21 matrix
        œµ‚ÇÅ 0 0 œµ‚ÇÇ œµ‚ÇÉ 0 0 0 0 Œ≥ 0 0 0 0 Œ± Œ≤ 0 0
        0 œµ‚ÇÇ 0 œµ‚ÇÅ 0 œµ‚ÇÉ 0 0 0 0 Œ≥ 0 0 0 0 0 Œ≤ 0
        0 0 œµ‚ÇÉ 0 œµ‚ÇÅ œµ‚ÇÇ 0 0 0 0 0 Œ≥ 0 0 0 0 0 0
        0 0 0 0 0 0 œµ‚ÇÑ 0 0 0 0 0 Œ≥ 0 œµ‚ÇÅ 0 0 Œ≤
        0 0 0 0 0 0 0 œµ‚ÇÖ 0 0 0 0 0 Œ≥ 0 œµ‚ÇÅ œµ‚ÇÇ Œ±
        0 0 0 0 0 0 0 0 œµ‚ÇÜ œµ‚ÇÅ œµ‚ÇÇ œµ‚ÇÉ Œ± Œ≤ 0 0 0 0
    ]
end
form_matrix(system::CrystalSystem, strains::AbstractVector{<:EngineeringStrain}) =
    vcat(form_matrix(system, strain) for strain in strains)

function reorder_c·µ¢‚±º(::Cubic, c·µ¢‚±º)
    c‚ÇÅ‚ÇÅ, c‚ÇÅ‚ÇÇ, c‚ÇÑ‚ÇÑ = c·µ¢‚±º
    ùüé = zero(c‚ÇÅ‚ÇÅ)
    return StiffnessMatrix(
        [
            c‚ÇÅ‚ÇÅ c‚ÇÅ‚ÇÇ c‚ÇÅ‚ÇÇ ùüé ùüé ùüé
            c‚ÇÅ‚ÇÇ c‚ÇÅ‚ÇÅ c‚ÇÅ‚ÇÇ ùüé ùüé ùüé
            c‚ÇÅ‚ÇÇ c‚ÇÅ‚ÇÇ c‚ÇÅ‚ÇÅ ùüé ùüé ùüé
            ùüé ùüé ùüé c‚ÇÑ‚ÇÑ ùüé ùüé
            ùüé ùüé ùüé ùüé c‚ÇÑ‚ÇÑ ùüé
            ùüé ùüé ùüé ùüé ùüé c‚ÇÑ‚ÇÑ
        ],
    )
end

function fit_elastic_constant(
    system::CrystalSystem,
    strains::AbstractVector{<:EngineeringStrain},
    stresses::AbstractVector{<:EngineeringStress},
)
    œÉ = vcat(stresses...)  # Length 6n vector, n = length(strains) = length(stresses)
    Œµ = form_matrix(system, strains)  # Size 6n√óN matrix, N = # independent coefficients
    c·µ¢‚±º = Œµ \ œÉ  # Length N vector
    return reorder_c·µ¢‚±º(system, c·µ¢‚±º)
end
