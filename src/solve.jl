using Crystallography:
    CrystalSystem,
    Cubic,
    Hexagonal,
    Trigonal,
    Tetragonal,
    Orthorhombic,
    Monoclinic,
    Triclinic

export solve_elastic_matrix

function construct_strain_matrix(::Cubic, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó3 matrix
        œµ‚ÇÅ œµ‚ÇÇ+œµ‚ÇÉ 0
        œµ‚ÇÇ œµ‚ÇÅ+œµ‚ÇÉ 0
        œµ‚ÇÉ œµ‚ÇÅ+œµ‚ÇÇ 0
        0 0 œµ‚ÇÑ
        0 0 œµ‚ÇÖ
        0 0 œµ‚ÇÜ
    ]
end
function construct_strain_matrix(::Tetragonal, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó6 matrix
        œµ‚ÇÅ 0 œµ‚ÇÇ œµ‚ÇÉ 0 0
        œµ‚ÇÇ 0 œµ‚ÇÅ œµ‚ÇÉ 0 0
        0 œµ‚ÇÉ 0 œµ‚ÇÅ+œµ‚ÇÇ 0 0
        0 0 0 0 œµ‚ÇÑ 0
        0 0 0 0 œµ‚ÇÖ 0
        0 0 0 0 0 œµ‚ÇÜ
    ]
end
function construct_strain_matrix(::Orthorhombic, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó9 matrix
        œµ‚ÇÅ 0 0 œµ‚ÇÇ œµ‚ÇÉ 0 0 0 0
        0 œµ‚ÇÇ 0 œµ‚ÇÅ 0 œµ‚ÇÉ 0 0 0
        0 0 œµ‚ÇÉ 0 œµ‚ÇÅ œµ‚ÇÇ 0 0 0
        0 0 0 0 0 0 œµ‚ÇÑ 0 0
        0 0 0 0 0 0 0 œµ‚ÇÖ 0
        0 0 0 0 0 0 0 0 œµ‚ÇÜ
    ]
end
function construct_strain_matrix(::Hexagonal, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó5 matrix
        œµ‚ÇÅ 0 œµ‚ÇÇ œµ‚ÇÉ 0
        œµ‚ÇÇ 0 œµ‚ÇÅ œµ‚ÇÉ 0
        0 œµ‚ÇÉ 0 œµ‚ÇÅ+œµ‚ÇÇ 0
        0 0 0 0 œµ‚ÇÑ
        0 0 0 0 œµ‚ÇÖ
        œµ‚ÇÜ 0 -œµ‚ÇÜ 0 0
    ]
end
function construct_strain_matrix(::Trigonal, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó6 matrix
        œµ‚ÇÅ 0 œµ‚ÇÇ œµ‚ÇÉ 0 œµ‚ÇÖ
        œµ‚ÇÇ 0 œµ‚ÇÅ œµ‚ÇÉ 0 -œµ‚ÇÖ
        0 œµ‚ÇÉ 0 œµ‚ÇÅ+œµ‚ÇÇ 0 0
        0 0 0 0 œµ‚ÇÑ -2œµ‚ÇÜ
        0 0 0 0 œµ‚ÇÖ 2(œµ‚ÇÅ-œµ‚ÇÇ)
        œµ‚ÇÜ 0 -œµ‚ÇÜ 0 0 -2œµ‚ÇÑ
    ]
end
function construct_strain_matrix(::Monoclinic, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    return [  # 6√ó13 matrix
        œµ‚ÇÅ 0 0 œµ‚ÇÇ œµ‚ÇÉ 0 0 0 0 œµ‚ÇÜ 0 0 0
        0 œµ‚ÇÇ 0 œµ‚ÇÅ 0 œµ‚ÇÉ 0 0 0 0 œµ‚ÇÜ 0 0
        0 0 œµ‚ÇÉ 0 œµ‚ÇÅ œµ‚ÇÇ 0 0 0 0 0 œµ‚ÇÜ 0
        0 0 0 0 0 0 œµ‚ÇÑ 0 0 0 0 0 œµ‚ÇÖ
        0 0 0 0 0 0 0 œµ‚ÇÖ 0 0 0 0 œµ‚ÇÑ
        0 0 0 0 0 0 0 0 œµ‚ÇÜ œµ‚ÇÅ œµ‚ÇÇ œµ‚ÇÉ 0
    ]
end
function construct_strain_matrix(::Triclinic, strain::EngineeringStrain)
    œµ‚ÇÅ, œµ‚ÇÇ, œµ‚ÇÉ, œµ‚ÇÑ, œµ‚ÇÖ, œµ‚ÇÜ = strain
    Œ±, Œ≤, Œ≥ = œµ‚ÇÑ / 2, œµ‚ÇÖ / 2, œµ‚ÇÜ / 2
    return [  # 6√ó21 matrix
        œµ‚ÇÅ 0 0 œµ‚ÇÇ œµ‚ÇÉ 0 0 0 0 Œ≥ 0 0 0 0 Œ± Œ≤ 0 0
        0 œµ‚ÇÇ 0 œµ‚ÇÅ 0 œµ‚ÇÉ 0 0 0 0 Œ≥ 0 0 0 0 0 Œ≤ 0
        0 0 œµ‚ÇÉ 0 œµ‚ÇÅ œµ‚ÇÇ 0 0 0 0 0 Œ≥ 0 0 0 0 0 0
        0 0 0 0 0 0 œµ‚ÇÑ 0 0 0 0 0 Œ≥ 0 œµ‚ÇÅ 0 0 Œ≤
        0 0 0 0 0 0 0 œµ‚ÇÖ 0 0 0 0 0 Œ≥ 0 œµ‚ÇÅ œµ‚ÇÇ Œ±
        0 0 0 0 0 0 0 0 œµ‚ÇÜ œµ‚ÇÅ œµ‚ÇÇ œµ‚ÇÉ Œ± Œ≤ 0 0 0 0
    ]
end
construct_strain_matrix(
    system::CrystalSystem,
    strains::AbstractVector{<:EngineeringStrain},
) = vcat(construct_strain_matrix(system, strain) for strain in strains)

function reconstruct_c·µ¢‚±º(::Cubic, c·µ¢‚±º)
    c‚ÇÅ‚ÇÅ, c‚ÇÅ‚ÇÇ, c‚ÇÑ‚ÇÑ = c·µ¢‚±º
    ùüé = zero(c‚ÇÅ‚ÇÅ)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        c‚ÇÅ‚ÇÇ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÅ‚ÇÅ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        c‚ÇÑ‚ÇÑ,
    )
end
function reconstruct_c·µ¢‚±º(::Tetragonal, c·µ¢‚±º)
    c‚ÇÅ‚ÇÅ, c‚ÇÉ‚ÇÉ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, c‚ÇÑ‚ÇÑ, c‚ÇÜ‚ÇÜ = c·µ¢‚±º
    ùüé = zero(c‚ÇÅ‚ÇÅ)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        c‚ÇÅ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÉ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        c‚ÇÜ‚ÇÜ,
    )
end
function reconstruct_c·µ¢‚±º(::Orthorhombic, c·µ¢‚±º)
    c‚ÇÅ‚ÇÅ, c‚ÇÇ‚ÇÇ, c‚ÇÉ‚ÇÉ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, c‚ÇÇ‚ÇÉ, c‚ÇÑ‚ÇÑ, c‚ÇÖ‚ÇÖ, c‚ÇÜ‚ÇÜ = c·µ¢‚±º
    ùüé = zero(c‚ÇÅ‚ÇÅ)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        c‚ÇÅ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÇ‚ÇÇ,
        c‚ÇÇ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÉ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        ùüé,
        c‚ÇÖ‚ÇÖ,
        ùüé,
        c‚ÇÜ‚ÇÜ,
    )
end
function reconstruct_c·µ¢‚±º(::Hexagonal, c·µ¢‚±º)
    c‚ÇÅ‚ÇÅ, c‚ÇÉ‚ÇÉ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, c‚ÇÑ‚ÇÑ = c·µ¢‚±º
    ùüé = zero(c‚ÇÅ‚ÇÅ)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        c‚ÇÅ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÉ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        (c‚ÇÅ‚ÇÅ - c‚ÇÅ‚ÇÇ) / 2,
    )
end
function reconstruct_c·µ¢‚±º(::Trigonal, c·µ¢‚±º)
    c‚ÇÅ‚ÇÅ, c‚ÇÉ‚ÇÉ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, c‚ÇÑ‚ÇÑ, c‚ÇÅ‚ÇÑ = c·µ¢‚±º
    ùüé = zero(c‚ÇÅ‚ÇÅ)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        c‚ÇÅ‚ÇÉ,
        c‚ÇÅ‚ÇÑ,
        ùüé,
        ùüé,
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÉ,
        -c‚ÇÅ‚ÇÑ,
        ùüé,
        ùüé,
        c‚ÇÉ‚ÇÉ,
        ùüé,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        ùüé,
        ùüé,
        c‚ÇÑ‚ÇÑ,
        c‚ÇÅ‚ÇÑ,
        (c‚ÇÅ‚ÇÅ - c‚ÇÅ‚ÇÇ) / 2,
    )
end
function reconstruct_c·µ¢‚±º(::Monoclinic, c·µ¢‚±º)
    c‚ÇÅ‚ÇÅ, c‚ÇÇ‚ÇÇ, c‚ÇÉ‚ÇÉ, c‚ÇÅ‚ÇÇ, c‚ÇÅ‚ÇÉ, c‚ÇÇ‚ÇÉ, c‚ÇÑ‚ÇÑ, c‚ÇÖ‚ÇÖ, c‚ÇÜ‚ÇÜ, c‚ÇÅ‚ÇÜ, c‚ÇÇ‚ÇÜ, c‚ÇÉ‚ÇÜ, c‚ÇÑ‚ÇÖ = c·µ¢‚±º
    ùüé = zero(c‚ÇÅ‚ÇÅ)
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        c‚ÇÅ‚ÇÉ,
        ùüé,
        ùüé,
        c‚ÇÅ‚ÇÜ,
        c‚ÇÇ‚ÇÇ,
        c‚ÇÇ‚ÇÉ,
        ùüé,
        ùüé,
        c‚ÇÇ‚ÇÜ,
        c‚ÇÉ‚ÇÉ,
        ùüé,
        ùüé,
        c‚ÇÉ‚ÇÜ,
        c‚ÇÑ‚ÇÑ,
        c‚ÇÑ‚ÇÖ,
        ùüé,
        c‚ÇÖ‚ÇÖ,
        ùüé,
        c‚ÇÜ‚ÇÜ,
    )
end
function reconstruct_c·µ¢‚±º(::Triclinic, c·µ¢‚±º)
    c‚ÇÅ‚ÇÅ,
    c‚ÇÇ‚ÇÇ,
    c‚ÇÉ‚ÇÉ,
    c‚ÇÅ‚ÇÇ,
    c‚ÇÅ‚ÇÉ,
    c‚ÇÇ‚ÇÉ,
    c‚ÇÑ‚ÇÑ,
    c‚ÇÖ‚ÇÖ,
    c‚ÇÜ‚ÇÜ,
    c‚ÇÅ‚ÇÜ,
    c‚ÇÇ‚ÇÜ,
    c‚ÇÉ‚ÇÜ,
    c‚ÇÑ‚ÇÜ,
    c‚ÇÖ‚ÇÜ,
    c‚ÇÅ‚ÇÑ,
    c‚ÇÅ‚ÇÖ,
    c‚ÇÇ‚ÇÖ,
    c‚ÇÑ‚ÇÖ = c·µ¢‚±º
    return StiffnessMatrix(
        c‚ÇÅ‚ÇÅ,
        c‚ÇÅ‚ÇÇ,
        c‚ÇÅ‚ÇÉ,
        c‚ÇÅ‚ÇÑ,
        c‚ÇÅ‚ÇÖ,
        c‚ÇÅ‚ÇÜ,
        c‚ÇÇ‚ÇÇ,
        c‚ÇÇ‚ÇÉ,
        c‚ÇÇ‚ÇÑ,
        c‚ÇÇ‚ÇÖ,
        c‚ÇÇ‚ÇÜ,
        c‚ÇÉ‚ÇÉ,
        c‚ÇÉ‚ÇÑ,
        c‚ÇÉ‚ÇÖ,
        c‚ÇÉ‚ÇÜ,
        c‚ÇÑ‚ÇÑ,
        c‚ÇÑ‚ÇÖ,
        c‚ÇÑ‚ÇÜ,
        c‚ÇÖ‚ÇÖ,
        c‚ÇÖ‚ÇÜ,
        c‚ÇÜ‚ÇÜ,
    )
end

function construct_stress_matrix(::Cubic, stress::EngineeringStress)
    œÉ‚ÇÅ, œÉ‚ÇÇ, œÉ‚ÇÉ, œÉ‚ÇÑ, œÉ‚ÇÖ, œÉ‚ÇÜ = stress
    return [  # 6√ó3 matrix
        œÉ‚ÇÅ œÉ‚ÇÇ+œÉ‚ÇÉ 0
        œÉ‚ÇÇ œÉ‚ÇÅ+œÉ‚ÇÉ 0
        œÉ‚ÇÉ œÉ‚ÇÅ+œÉ‚ÇÇ 0
        0 0 œÉ‚ÇÑ
        0 0 œÉ‚ÇÖ
        0 0 œÉ‚ÇÜ
    ]
end
construct_stress_matrix(
    system::CrystalSystem,
    stresses::AbstractVector{<:EngineeringStrain},
) = vcat(construct_stress_matrix(system, stress) for stress in stresses)

function reconstruct_s·µ¢‚±º(::Cubic, s·µ¢‚±º)
    s‚ÇÅ‚ÇÅ, s‚ÇÅ‚ÇÇ, s‚ÇÑ‚ÇÑ = s·µ¢‚±º
    ùüé = zero(s‚ÇÅ‚ÇÅ)
    return StiffnessMatrix(
        s‚ÇÅ‚ÇÅ,
        s‚ÇÅ‚ÇÇ,
        s‚ÇÅ‚ÇÇ,
        ùüé,
        ùüé,
        ùüé,
        s‚ÇÅ‚ÇÅ,
        s‚ÇÅ‚ÇÇ,
        ùüé,
        ùüé,
        ùüé,
        s‚ÇÅ‚ÇÅ,
        ùüé,
        ùüé,
        ùüé,
        s‚ÇÑ‚ÇÑ,
        ùüé,
        ùüé,
        s‚ÇÑ‚ÇÑ,
        ùüé,
        s‚ÇÑ‚ÇÑ,
    )
end

function solve_elastic_matrix(
    system::CrystalSystem,
    strains::AbstractVector{<:EngineeringStrain},
    stresses::AbstractVector{<:EngineeringStress},
)
    œÉ = vcat(stresses...)  # Length 6n vector, n = length(strains) = length(stresses)
    Œµ = construct_strain_matrix(system, strains)  # Size 6n√óN matrix, N = # independent coefficients
    c·µ¢‚±º = Œµ \ œÉ  # Length N vector
    return reconstruct_c·µ¢‚±º(system, c·µ¢‚±º)
end
function solve_elastic_matrix(
    system::CrystalSystem,
    stresses::AbstractVector{<:EngineeringStress},
    strains::AbstractVector{<:EngineeringStrain},
)
    Œµ = vcat(strains...)
    œÉ = construct_stress_matrix(system, stresses)
    s·µ¢‚±º = œÉ \ Œµ
    return reconstruct_s·µ¢‚±º(system, s·µ¢‚±º)
end
solve_elastic_matrix(
    system::CrystalSystem,
    strains::AbstractVector{<:TensorStrain},
    stresses::AbstractVector{<:TensorStress},
) = solve_elastic_matrix(system, EngineeringStrain.(strains), EngineeringStress.(stresses))
solve_elastic_matrix(
    system::CrystalSystem,
    stresses::AbstractVector{<:TensorStress},
    strains::AbstractVector{<:TensorStrain},
) = solve_elastic_matrix(system, EngineeringStress.(stresses), EngineeringStrain.(strains))
